
دانشگاه صنعتی شریف
دانشکده مهندسی برق

سیگنال ها و سیستم ها
تمرین کامپیوتری سری 1

:نام دانشجویان و شماره دانشجویی
مینه کلنتریان(400101815)
و
 هستی سام(400101334)

:نام استاد
دکتر کربلایی

نیمسال دوم سال تحصیلی 1401-1402


سوال 1
آشنایی با متلب و پایتون
1.1 
رسم نمودار
%% Q 1.1

clear;
clc;
close all;

fh = figure();
fh.WindowState ='maximized';


%Q 1.1.1

subplot(23,13,[1:6,14:19,27:32,40:45,53:58,66:71,79:84,92:97,105:110,118:123,131:136,144:149,157:162]);
hold on;
grid minor ;
box on;

x1 = -2.99999:0.001:2.99999;
y1 = 2.*sawtooth(2*pi*x1,1);
y2 = 2.*sinc(4*x1);
y3 = square(pi*x1);
xlim([-3 3]);
ylim([-3.5 2.5]);
xticks(-3:1:3);
yticks(-3:1:2);

f = gobjects(3 , 1);
f(1) = plot(x1,y2,'color','g','LineStyle','--','LineWidth',2.5);
f(2) = plot(x1,y3,'Color','r','LineStyle',':','LineWidth',2.5);
f(3) = plot(x1,y1,'color','b','LineWidth',2.5);

ylabel('$$y(t)$$','Interpreter','latex');
title('$$y_{i}(t)$$ for $$i\in \{1,2,3\} $$ on the same figure','Interpreter','latex');
legend(f([3,1,2]),'y_1(t)','y_2(t)','y_3(t)');


%Q 1.1.2

subplot(23,13,[8:13,21:26,34:39,47:52,60:65,73:78,86:91,99:104]);
hold on;
grid minor;
box on;

n2 =-10:1:20;
h2 = ((1/2).^n2).*heaviside(n2+0.1)+((2/3).^n2).*heaviside(n2+1.1);
xlim([-10 20]);
ylim([0 2]);

stem(n2,h2,'filled','Color','k','LineWidth',2.5);

ylabel('$$h[n]$$','Interpreter','latex');
title('$$h[n] = (\frac{1}{2})^n u[n] + (\frac{2}{3})^n u[n+1]$$','Interpreter','latex');


%Q 1.1.3

subplot(23,13,[196:201,209:214,222:227,235:240,248:253,261:266,274:279,287:292]);
hold on;
box on;

x2 = -1:0.01:3;
y4 = (x2).^3 - 4*(x2).^2 + 4*(x2) + 1 ;
xlim([-1 3]);
ylim([-8 4]);
plot(x2,y4,'Color',[0.3010 0.7450 0.9330],'LineWidth',1);

annotation('arrow',[0.22 0.20],[0.295 0.295],'LineWidth',1);
text(0.05,0.1,'$$x^3 - 4x^2 + 4x + 1 = 0$$','Interpreter','latex','FontSize',16);
title('$$y_{4}(x)$$','Interpreter','latex');


%Q 1.1.4

subplot(23,13,[139:142,152:155,165:168,178:181,191:194,204:207,217:220,230:233,243:246,256:259,269:270,271:272,282:285,295:298]);
hold on;
grid on;
box on;

a = 0:0.01:2*pi;
R = 4;

x5 = 8 + R.*cos(a);
x6 = 6 + (2.*cos(a))./sqrt(cos(a).^2 + 4.*sin(a).^2);
x7 = 10 + (2.*cos(a))./sqrt(cos(a).^2 + 4.*sin(a).^2);
x8 = 8 + (2.*cos(a))./sqrt(4.*cos(a).^2 + sin(a).^2);
x9 = x8;

y5 = 6 + R.*sin(a);
y6 = 6 + (2.*sin(a))./sqrt(cos(a).^2 + 4.*sin(a).^2);
y7 = y6;
y8 = 8 + (2.*sin(a))./sqrt(4.*cos(a).^2 + sin(a).^2);
y9 = 4 + (2.*sin(a))./sqrt(4.*cos(a).^2 + sin(a).^2);

xlim([4.000001 12]);
ylim([1.1 10.9]);

plot(x5,y5,'Color',[0 0.4470 0.7410],'LineWidth',1.5);
plot(x6,y6,'Color',[0.8500 0.3250 0.0980],'LineWidth',1.5);
plot(x7,y7,'Color',[0.9290 0.6940 0.1250],'LineWidth',1.5);
plot(x8,y8,'Color',[0.4660 0.6740 0.1880],'LineWidth',1.5);
plot(x9,y9,'Color',[0.4940 0.1840 0.5560],'LineWidth',1.5);

1.2 
Conway’s Game of Life
%Q 1.2


clc;
clear;
close all;

N = 100;

Matrix = zeros(N+2,N+2);
Matrix(2:N+1,2:N+1) = rand(N);
NewMatrix = (Matrix < 0.3);


 for a = 1:200
     Matrix = zeros(N+2,N+2);
     for i = 2:N+1
         for j = 2:N+1

             S = NewMatrix(i-1,j-1) + NewMatrix(i-1,j) + NewMatrix(i-1,j+1) + ...
             NewMatrix(i,j-1) + NewMatrix(i,j+1) + ...
             NewMatrix(i+1,j-1) + NewMatrix(i+1,j) + NewMatrix(i+1,j+1);

             if (NewMatrix(i,j)==1) && (S<2 || S>3)
                 Matrix(i,j) = 0;
             end

             if (NewMatrix(i,j)==1) && (S==2 || S==3)
                 Matrix(i,j) = 1;
             end

             if (NewMatrix(i,j)==0) && (S == 3)
                 Matrix(i,j) = 1;
             end
         end
     end
     NewMatrix = Matrix;
     pause(0.1);
     spy(NewMatrix,'.',5);
     drawnow

 end
در این سوال، ماتریسی تعریف می کنیم که دو تا بیشتر از تعداد ماتریس اصلی سطر و ستون دارند که ماتریس اصلی را احاطه کند و موقع بررسی کردن گوشه ها و ضلع ها راحت تر باشد

سوال 2
 این دو داده  که روی خط مشخص شده هستندرا به عنوان مقادیر جدید گزارش کرده و اعداد بین این دو داده که روی خط مشخص شده هستند را به عنوان مقادیر جدید گزارش کرده 
اگر به بازه 0 تا 3 نگاه کنیم و معادله خطی که این دو را به هم وصل میکند بنویسیم داریم

  پس باید تابعی که با تابع گسترش داده شده کانوالو میکنیم به گونه ایی که در بالا تعریف شد برای هر لحظه ایی باشد یعنی خود ایکس سوم باید در کمترین مقدار (منظور مقدار دبلیو در ایکس برابر 0) و منهای آن از یک تقسیم بر 3 در بیشترین مقدار( منظور مقدار دبلیو در ایکس مساوی 3) بین دو مقدار غیر 0 تابع گسترش داده شده ضرب شده باشد پس شکل آن شکل زیر خواهد بود

 

تعمیم آن به دو بعد این گونه خواهد بود که سیگنال خواسته شده را یکبار به صورت افقی و یک بار عمودی با ماتریسی که بین اعضای آن 0 قرار دادیم کانوالو میکنیم تا هم به صورت افقی و هم عمودی 0 های بین آن پرشوند.
 %2.1
clear;
clc;
close all;
A=imread('zebra.jpg');
B=zeros(3*size(A));
B(1:3:end,1:3:end)=A;
imshow(A);
p=[1/3 2/3 1 2/3 1/3];
C=conv2(p,p,B);
imshow(cast(C,'uint8'));

2.2
In signal processing,a matched filter is obtained by correlating a known delayed signal, or template, with an unknown signal to detect the presence of the template in the unknown signal.This is equivalent to convolving the unknown signal with a conjugated time-reversed version of the template. The matched filter is the optimal linear filter for maximizing the signal-to-noise ratio (SNR) in the presence of additive stochastic noise.

%2.2
clc;
clear;
close all;
A =imread('findsmiley.jpg');
B=[255 255 255 255 255 255 255;255 0 0 0 0 0 255;...
    255 0 255 0 255 0 255;255 0 0 255 0 0 255;...
    255 0 0 0 0 0 255;255 0 255 255 255 0 255;255 0 0 0 0 0 255;...
    255 255 255 255 255 255 255];
B1=[255 255 255 255 255 255 255;255 0 0 0 0 0 255;255 0 255 255 255 0 255;255 0 0 0 0 0 255;...
    255 0 0 255 0 0 255;255 0 255 0 255 0 255;255 0 0 0 0 0 255;255 255 255 255 255 255 255];
C=conv2(B1,A);
[n,m]=find(C==max(C,[],'all'));
imshow(cast(A(n-6:n,m-7:m),'uint8'),'InitialMagnification',5000);
disp(n);
disp(m);
disp('the coordinates of the nose will be n-4=433 & m-3=766');

سوال 3

 Zتحلیل سیستم ها با استفاده از تبدیل 
3.1
بررسی تأثیر مکان قطب بر روی رفتار سیستم
%%Q 3.1

clc;
clear;
close all;

%%Q 3.1.1

b1 = 1;
a1 = [1 -0.8];

b2 = 1;
a2 = [1 -0.2];

subplot(2,1,1);

grid on;
hold on;
box on;

xlim([-2 2]);
ylim([-2 2]);

zplane(b1,a1);

title('X1(z)');
legend('zero','pole');

subplot(2,1,2);

grid on;
hold on;
box on;

xlim([-2 2]);
ylim([-2 2]);

zplane(b2,a2);

title('X2(z)');
legend('zero','pole');
n=50;
t = 0:n-1 ;
h1 = impz(b1,a1,n);
h2 = impz(b2,a2,n);

figure;

plot(t,h1);
legend('h1(t)');

grid on;
box on;
plot(t,h2);
legend('h2(t)');

grid on;
box on;
با توجه به پاسخ های ضربه ی سیستم ها، میتوان فهمید که سیستم دوم زودتر از سیستم اول همگرا می شود . این موضوع به دلیل کمتر بودن فاصله ی تک قطب سیستم دوم به مبدا، نسبت به تک قطب سیستم اول است 
%%Q 3.1.2

b3 = 1;
a3 = [1 -1.2];

b4 = 1;
a4 = [1 -4.8];

subplot(2,1,1);

grid on;
hold on;
box on;

xlim([-2 2]);
ylim([-2 2]);

zplane(b3,a3);

title('X3(z)');
legend('zero','pole');

subplot(2,1,2);

grid on;
hold on;
box on;

xlim([-2 6]);
ylim([-2 2]);

zplane(b4,a4);

title('X4(z)');
legend('zero','pole');
n=50;
t = 0:n-1 ;
h3 = impz(b3,a3,n);
h4 = impz(b4,a4,n);

figure;

plot(t,h3);
legend('h3(t)');

grid on;
box on;
plot(t,h4);
legend('h4(t)');

grid on;
box on;
با توجه به نمودار پاسخ ضربه ی سیستم ها میتوان فهمید که هر دو سیستم واگرا هستند و دلیل آن هم این است که تک قطب هر دو سیستم در خارج از دایره ی واحد قرار دارد و همچنین هر چه قطب از مبدا دورتر باشد، سیستم واگرا تر خواهد بود
%Q 3.1.3

b5 = 1;
a5 = [1 -1];

b6 = 1;
a6 = [1 -2 1];

subplot(2,1,1);

grid on;
hold on;
box on;

xlim([-2 2]);
ylim([-2 2]);

zplane(b5,a5);

title('X5(z)');
legend('zero','pole');

subplot(2,1,2);

grid on;
hold on;
box on;

xlim([-2 2]);
ylim([-2 2]);

zplane(b6,a6);

title('X6(z)');
legend('zero','pole');
n=50;
t = 0:n-1 ;
h5 = impz(b5,a5,n);
h6 = impz(b6,a6,n);

figure;

plot(t,h5);
legend('h5(t)');

grid on;
box on;
plot(t,h6);
legend('h6(t)');
grid on;
box on;
با توجه به پاسخ های ضربه ی سیستم ها می توان فهمید که پاسخ سیستم 5 مقداری ثابت شده است چون تک قطب آن روی دایره ی واحد قرار دارد.حال در سیستم 6 همان قطب و صفر هر کدام دو بار تکرار شده اند و صفر و قطب مکرر داریم پس میتوان گفت که پاسخ ضربه ی سیستم 5 مشتق پاسخ ضربه ی سیستم 6 است برای همین هم باید پاسخ ضربه ی سیستم 6 خطی باشد
%Q 3.1.4

b7 = [0 0.5];
a7 = [1 -1 +0.5];

b8 = [0 1];
a8 = [1 -2 +2];

subplot(2,1,1);

grid on;
hold on;
box on;

xlim([-2 2]);
ylim([-2 2]);

zplane(b7,a7);

title('X7(z)');
legend('zero','pole');

subplot(2,1,2);

grid on;
hold on;
box on;

xlim([-2 2]);
ylim([-2 2]);

zplane(b8,a8);

title('X8(z)');
legend('zero','pole');
n=85;
t = 0:n-1 ;
h7 = impz(b7,a7,n);
h8 = impz(b8,a8,n);

figure;

plot(t,h7);
legend('h7(t)');

grid on;
box on;
plot(t,h8);
legend('h8(t)');
grid on;
box on;
با توجه به پاسخ های ضربه ی سیستم ها میتوان فهمید که هر دو نوسانی هستند و به دلیل وجود دو قطب و یک صفر است و همچنین پاسخ ضربه ی سیستم 7 همگراست چون هر دو قطب یسیتم در داخل دایره ی واحد قرار دارند و پاسخ سیستم 8 واگراست چون هر دو قطب آن در خارج از دایره ی واحد قرار دارد 

3.2
 Z خواص تبدیل
%Q 3.2

%Q 3.2.1

clc;
clear;
close all;

syms n z;

x = heaviside(n).*0.5.*(exp(1i.*n.*pi./4) + exp(-1i.*n.*pi./4));
f = ztrans(x,n,z)
F = collect(f);
[b , a] = numden(F);
a1 =cast((coeffs(a,'All')),"double");
b1 = cast((coeffs(b,'All')),"double");

figure;

hold on;
grid on;
box on;

zplane(b1,a1);
legend("zero","pole");
title('X(z)','Interpreter','latex');
با توجه به نمودار صفر و قطبی که داریم و این موضوع که تمام صفر ها و خصوصا قطب ها روی دایره ی واحد قرار دارند و سیگنال در زمان مثبت مقدار دارد پس داریم
ROC : | z| < 1
است f همچنین تابع ما تابع 

%Q 3.2.2

x1 = n.*x;
f1 = simplifyFraction(simplify(ztrans(x1,n,z)))
  . است f برابر شده ی مشتق تابع  -z این تابع انگار 

%Q 3.2.3

F_prim = subs(f,z,z.^2);
[B , A] = numden(F_prim);
A1 =cast((coeffs(A,'All')),"double");
B1 = cast((coeffs(B,'All')),"double");

figure;

hold on;
grid on;
box on;

zplane(B1,A1);
legend("zero","pole");
title('X_{2}(z) = X(z^2)');

a_prim = poly2sym(A1,z);
b_prim = poly2sym(B1,z);
g = simplify(b_prim/a_prim)
G = iztrans(simplify(b_prim/a_prim));

m = 1:50;

new_x = subs(G,n,m);
old_x = subs(x,n,m);

figure;

hold on;
grid on;
box on;

stem(m,old_x,'filled','Color','b');
title('x[n]');

figure;

hold on;
grid on;
box on;

stem(m,new_x,'filled','Color','r');
title('x_{2}[n]');
 نامیده بودیم صفر و قطب ها را به این صورت حساب کنیم که  g نامیده بودیم قطب ها و صفر هایش را میدانستیم و حال میتوانستیم باری تابع جدیدمان که آن را  f  چون در قسمت اول که تابعمان را
z = 
درست است f که برای تمام قطب ها و صفر ها در 
 قطب های جدید به صورت جفت هایی هستند که 180 درجه با هم اختلاف فاز دارند





question4.1
Karplus–Strong string synthesis is a method of physical modelling synthesis that loops a short waveform through a filtered delay line to simulate the sound of a hammered or plucked string or some types of percussion.
A short excitation waveform (of length L samples) is generated. In the original algorithm, this was a burst of white noise, but it can also include any wideband signal, such as a rapid sine wave chirp or frequency sweep, or a single cycle of a sawtooth wave or square wave.
This excitation is output and simultaneously fed back into a delay line L samples long.
The output of the delay line is fed through a filter. The gain of the filter must be less than 1 at all frequencies, to maintain a stable positive feedback loop. The filter can be a first-order lowpass filter (as pictured). In the original algorithm, the filter consisted of averaging two adjacent samples, a particularly simple filter that can be implemented without a multiplier, requiring only shift and add operations. The filter characteristics are crucial in determining the harmonic structure of the decaying tone.
The filtered output is simultaneously mixed into the output and fed back into the delay line.

%4.2
clear;
clc;
close all;
Fs=44100;
notes = ['G','G','A#','D#','D', ...
        'G','G','A#','D','C', ...
        'G','G','G','G','G','G#', ...
        'G#','G#','G#','G#','G','G'];
notes=regexp(notes,'\w\W*','match'); 
noteDurations = [330, 330, 490, 490, 790, ...
                330, 330, 490, 490, 750, ...
                330, 330, 330, 490, 490, 700, ...
                330, 330, 330, 490, 490, 750];
song=outCome(notes,noteDurations);
player=audioplayer(song,Fs);
play(player);
audiowrite('result.wav',song, Fs);


function y=generateNote(freq,duration,alpha)
Fs=44100;
N=floor(Fs./freq);
x=2.*rand(N,1)-1;
y=zeros((Fs.*duration)/1000,1);
y(1:N)=x;%%az N+2 shoro mishavad chon zirvand matrix ha dar matlab az 1 shoro mishavand va inke y(n-(N+1)) darim
for n=N+2:(Fs.*duration)/1000
y(n)=(alpha/2).*(y(n-N)+y(n-(N+1)));
end
end
function fq=noteFreq(note)
switch char(note)
    case 'C'
        fq=261.63;
    case {'C#','Db'}
        fq=277.18;
    case 'D'
        fq=293.66;
    case {'D#','Eb'}
        fq=311.13;
    case 'E'
        fq=329.63;
    case 'F'
        fq=349.23;
    case {'F#','Gb'}
        fq=369.99;
    case 'G'
        fq=392;
    case {'G#','Ab'}
        fq=415.3;
    case 'A'
        fq=440;
    case {'A#','Bb'}
        fq=466.16;
    case 'B'
        fq=493.88;
    otherwise
        fq=0;
end
end
function O=outCome(notes,noteDuration)
%FQ=zeros(size(notes));
alpha=0.98;
%O=zeros(size(noteDuration));
O=generateNote(noteFreq(notes(1)),noteDuration(1),alpha);
for i=2:length(notes)
    O=[O;generateNote(noteFreq(notes(i)),noteDuration(i),alpha)];
end
end






